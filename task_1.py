# -*- coding: utf-8 -*-
"""Task 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RAqGBYlVzcDLtGgBcqyGEG77AvA6Kasf
"""

# import collab
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path = "/content/drive/MyDrive/content/sample_sales_data.csv"
df = pd.read_csv(path)
df.describe

pip install pandas

import pandas as pd

path = "/content/drive/MyDrive/content/sample_sales_data.csv"
df = pd.read_csv(path)
df.drop(columns=["Unnamed: 0"], inplace=True, errors='ignore')
df.head(5)

df.info()

df.describe()

!pip install seaborn

import seaborn as sns

def plot_continuous_distribution(data: pd.DataFrame = None, column: str = None, height: int = 8):
  _ = sns.displot(data, x=column, kde=True, height=height, aspect=height/5).set(title=f'Distribution of {column}');

def get_unique_values(data, column):
  num_unique_values = len(data[column].unique())
  value_counts = data[column].value_counts()
  print(f"Column: {column} has {num_unique_values} unique values\n")
  print(value_counts)

def plot_categorical_distribution(data: pd.DataFrame = None, column: str = None, height: int = 8, aspect: int = 2):
  _ = sns.catplot(data=data, x=column, kind='count', height=height, aspect=aspect).set(title=f'Distribution of {column}');

plot_continuous_distribution(df, 'unit_price')

plot_continuous_distribution(df, 'quantity')

plot_continuous_distribution(df, 'total')

get_unique_values(df, 'transaction_id')

get_unique_values(df, 'product_id')

get_unique_values(df, 'category')

plot_categorical_distribution(df, 'category', height=10, aspect=3.5)

get_unique_values(df, 'customer_type')

plot_categorical_distribution(df, 'customer_type', height=5, aspect=1.5)

get_unique_values(df, 'payment_type')

plot_categorical_distribution(df, 'payment_type', height=5, aspect=1.5)

get_unique_values(df, 'timestamp')

def convert_to_datetime(data: pd.DataFrame = None, column: str = None):

  dummy = data.copy()
  dummy[column] = pd.to_datetime(dummy[column], format='%Y-%m-%d %H:%M:%S')
  return dummy

df = convert_to_datetime(df, 'timestamp')

df.info()

df['hour'] = df['timestamp'].dt.hour

df.head()

get_unique_values(df, 'hour')

corr = df.corr()
corr.style.background_gradient(cmap='coolwarm')